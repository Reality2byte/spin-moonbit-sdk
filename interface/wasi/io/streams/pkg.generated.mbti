// Generated using `moon info`, DON'T EDIT IT
package "gmlewis/spin-moonbit-sdk/interface/wasi/io/streams"

import(
  "gmlewis/spin-moonbit-sdk/interface/wasi/io/error"
  "gmlewis/spin-moonbit-sdk/interface/wasi/io/poll"
)

// Values

// Errors

// Types and methods
pub(all) struct InputStream(Int)
fn InputStream::blocking_read(Self, UInt64) -> Result[FixedArray[Byte], StreamError]
fn InputStream::blocking_skip(Self, UInt64) -> Result[UInt64, StreamError]
fn InputStream::drop(Self) -> Unit
fn InputStream::equal(Self, Self) -> Bool // from trait `Eq`
#deprecated
fn InputStream::inner(Self) -> Int
#deprecated
fn InputStream::op_equal(Self, Self) -> Bool // from trait `Eq`
fn InputStream::output(Self, &Logger) -> Unit // from trait `Show`
fn InputStream::read(Self, UInt64) -> Result[FixedArray[Byte], StreamError]
fn InputStream::skip(Self, UInt64) -> Result[UInt64, StreamError]
fn InputStream::subscribe(Self) -> @poll.Pollable
fn InputStream::to_string(Self) -> String // from trait `Show`
impl Eq for InputStream
impl Show for InputStream

pub(all) struct OutputStream(Int)
fn OutputStream::blocking_flush(Self) -> Result[Unit, StreamError]
fn OutputStream::blocking_splice(Self, InputStream, UInt64) -> Result[UInt64, StreamError]
fn OutputStream::blocking_write_and_flush(Self, FixedArray[Byte]) -> Result[Unit, StreamError]
fn OutputStream::blocking_write_zeroes_and_flush(Self, UInt64) -> Result[Unit, StreamError]
fn OutputStream::check_write(Self) -> Result[UInt64, StreamError]
fn OutputStream::drop(Self) -> Unit
fn OutputStream::equal(Self, Self) -> Bool // from trait `Eq`
fn OutputStream::flush(Self) -> Result[Unit, StreamError]
#deprecated
fn OutputStream::inner(Self) -> Int
#deprecated
fn OutputStream::op_equal(Self, Self) -> Bool // from trait `Eq`
fn OutputStream::output(Self, &Logger) -> Unit // from trait `Show`
fn OutputStream::splice(Self, InputStream, UInt64) -> Result[UInt64, StreamError]
fn OutputStream::subscribe(Self) -> @poll.Pollable
fn OutputStream::to_string(Self) -> String // from trait `Show`
fn OutputStream::write(Self, FixedArray[Byte]) -> Result[Unit, StreamError]
fn OutputStream::write_zeroes(Self, UInt64) -> Result[Unit, StreamError]
impl Eq for OutputStream
impl Show for OutputStream

pub(all) enum StreamError {
  LastOperationFailed(@error.Error_)
  Closed
}
fn StreamError::equal(Self, Self) -> Bool // from trait `Eq`
#deprecated
fn StreamError::op_equal(Self, Self) -> Bool // from trait `Eq`
fn StreamError::output(Self, &Logger) -> Unit // from trait `Show`
fn StreamError::to_string(Self) -> String // from trait `Show`
impl Eq for StreamError
impl Show for StreamError

// Type aliases

// Traits

