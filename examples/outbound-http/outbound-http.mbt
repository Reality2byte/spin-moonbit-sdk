// Generated by `wit-bindgen` 0.29.0.

let url = "https://random-data-api.fermyon.app/physics/json"

/// This function is invoked with an incoming HTTP Request, and a resource
/// `response-outparam` which provides the capability to reply with an HTTP
/// Response. The response is sent by calling the `response-outparam.set`
/// method, which allows execution to continue after the response has been
/// sent. This enables both streaming to the response body, and performing other
/// work.
///
/// The implementor of this function must write a response to the
/// `response-outparam` before returning, or else the caller will respond
/// with an error on its behalf.
pub fn handle(
  request : @types.IncomingRequest,
  response_out : @types.ResponseOutparam
) -> Unit {
  let response = match @util.split_path(request) {
      (@types.Get, ["outbound-http"]) => handle_get()
      _ => return @util.respond_404(response_out)
    }
    |> Ok
  response_out.set(response)
}

fn handle_get() -> @types.OutgoingResponse {
  let req = @types.OutgoingRequest::outgoing_request(
    @types.Fields::from_list([]).unwrap(),
  )
  req.set_path_with_query(Some(url)).unwrap()
  // For debugging:
  @util.println(req.method().to_string())
  @util.println(req.path_with_query().unwrap())
  //
  match @outgoingHandler.handle(req, None) {
    Ok(result) =>
      @util.make_response(
        @encoder.str2bytes(result.to_string()),
        content_type=b"application/json",
      )
    Err(e) => {
      let msg = @encoder.str2bytes(e.to_string())
      @util.make_response(msg, status_code=500)
    }
  }
}
