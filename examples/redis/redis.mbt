// Generated by `wit-bindgen` 0.29.0.

let redis_address = "redis://localhost:6379/"

/// This function is invoked with an incoming HTTP Request, and a resource
/// `response-outparam` which provides the capability to reply with an HTTP
/// Response. The response is sent by calling the `response-outparam.set`
/// method, which allows execution to continue after the response has been
/// sent. This enables both streaming to the response body, and performing other
/// work.
///
/// The implementor of this function must write a response to the
/// `response-outparam` before returning, or else the caller will respond
/// with an error on its behalf.
pub fn handle(
  request : @types.IncomingRequest,
  response_out : @types.ResponseOutparam
) -> Unit {
  let conn = match @redis.open(redis_address) {
    Ok(redis) => redis
    _ => return @util.respond_500(response_out)
  }
  let response = match @util.split_path(request) {
      (@types.Get, ["redis"]) => handle_get(conn)
      _ => return @util.respond_404(response_out)
    }
    |> Ok
  response_out.set(response)
}

fn handle_get(conn : @redis.Connection) -> @types.OutgoingResponse {
  match conn.set("test", b"Hello, World!") {
    Ok(_) => ()
    _ => return @util.make_500_response()
  }
  match conn.get("test") {
    Ok(Some(result)) => @util.make_response(result)
    _ => @util.make_404_response()
  }
}
