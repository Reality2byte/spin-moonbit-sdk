// Generated by `wit-bindgen` 0.29.0.

/// This function is invoked with an incoming HTTP Request, and a resource
/// `response-outparam` which provides the capability to reply with an HTTP
/// Response. The response is sent by calling the `response-outparam.set`
/// method, which allows execution to continue after the response has been
/// sent. This enables both streaming to the response body, and performing other
/// work.
///
/// The implementor of this function must write a response to the
/// `response-outparam` before returning, or else the caller will respond
/// with an error on its behalf.
pub fn handle(
  request : @types.IncomingRequest,
  response_out : @types.ResponseOutparam
) -> Unit {
  let store = match @keyValue.Store::open("default") {
    Ok(store) => store
    _ => {
      let ise = make_response(b"Internal Server Error", status_code=500) |> Ok
      response_out.set(ise)
      return
    }
  }
  let response = match @util.split_path(request) {
      (@types.Get, ["/kv-store", key]) => handle_get(store, key)
      (@types.Post, ["/kv-store", key]) => {
        let body = match request.consume() {
          Ok(body) => @ffi.ptr2bytes(body.0)
          _ => {
            let ise = make_response(b"Internal Server Error", status_code=500)
              |> Ok
            response_out.set(ise)
            return
          }
        }
        handle_post(store, key, body)
      }
      _ => make_response(b"Not Found", status_code=404)
    }
    |> Ok
  response_out.set(response)
}

fn handle_get(store : @keyValue.Store, key : String) -> @types.OutgoingResponse {
  match store.get(key) {
    Ok(Some(value)) => make_response(value)
    _ => make_response(b"Not Found", status_code=404)
  }
}

fn handle_post(
  store : @keyValue.Store,
  key : String,
  value : Bytes
) -> @types.OutgoingResponse {
  match store.set(key, value) {
    Ok(_) => make_response(b"OK")
    _ => make_response(b"Not Found", status_code=404)
  }
}

fn make_response(
  body : Bytes,
  ~status_code : UInt = 200
) -> @types.OutgoingResponse {
  let response = @types.outgoing_response(@types.fields())
  response
  .body()
  .unwrap()
  .write()
  .unwrap()
  .blocking_write_and_flush(body)
  .unwrap()
  response.set_status_code(status_code).unwrap()
  response
}
